/////////////////////////////////////////////////////////
//                                                     //
//               Master Hack Installer                 //
//                                                     //
/////////////////////////////////////////////////////////

#include "Extensions/Hack Installation.txt"
#include "_UnitMenuDefs.txt"

////////////////////////////////SUPPORTING CHANGES
PUSH
  //Include essential fixes and autopatches
  #include "_FE8EssentialFixes.event"

  // Debug Startup Screen
  #ifdef __DEBUG__
    ORG 0x000AD8   // this is somewhere in the startup routine
      BL(0x01C090) // Call the debug startup menu
  #endif

  // Remove arrow wiggling advancing RN
  ORG 0x1A774
  SHORT 0x2000 0
POP


////////////////////////////////FREE SPACE WITHIN BL RANGE
PUSH
ORG FreeSpaceBLRange //defined in custom definitions
#define inBLRange

  //Talk and Support don't end your turn
  #include "ContemporaryTalkSupport.event"

  //menu semitransparency
  #include "Semitransparency_changes.event"

  //Hold L to toggle Anims
  #include "LToggle.event"

  //negative wt/crit
  #include "NegativeDisplay.event"

  //Rescuees are drawn
  // #include "RescueMapSprite.event"

  //Expanded Suspend + Debuffs
  #include "Suspend_Debuffs.event"

  //Move and Con getters
  // #include "MovConGetters/FE8-Getters EA.txt"

  //clears the gamble/lunge/mercy when cancelling out of attack menu
  Unset_Attack_Flag:
  #incbin "Skill System/Internals/unset attack flag.dmp"

  //page 4 helptext
  RText_Page4_ladder:
  #incbin "MSS/rtext_page4.dmp"
  POIN RText_Page4

  #include "Range Fix/Range Fix BL.event"

#undef inBLRange
POP

////////////////////////////////FREE SPACE OUT OF BL RANGE
//start of Free space

  //Check if current character has the specified item: (Written for chapter 5)
  #inctext lyn "CheckItem.elf"

  //Weapon/Staff Range Fix
  #include "Range Fix/Range Fix Install.event"


  //HP Bars (and effective weapon warning)
  #include "HPbars.txt"

  //Improved Sound Mixer
  #include "SoundMixer.txt"

  //Danger Zone (select button)
  #include "DangerZone.event"

  //Event Writer ASMC
  #include "EventWriter.txt"

  //Casual Mode (based on Event ID 0xB0)
  #include "CasualMode.event"

  //Movement Arrow doesn't update on allies
  #include "MovementArrowFix.event"

  //negative stat boosts
  #include "NegativeStatBoosts.event"

  //Dragon Veins
  #include "DragonVeins.event"

  //Modular Stat Screen
  #include "ModularStatScreen.event"

  //Stat Screens palette by allegiance
  // #include "StatScreenAllegiance.event"

  //Allow Supply to be used in Prologue/Ch6:
  PUSH
  ORG $23f6e //Access Supply
  SHORT 0

  ORG $31646 //send to supply
  SHORT 0

  ORG $31650 //Usable in chapter 6
  SHORT 0x46C0

  //Change poison damage
  //Set constant damage to 4
  ORG 0x25A3E
  SHORT 0x3304
  //Set variable damage to 0
  ORG 0x25A36
  SHORT 0x2000

  POP


  //Send list of items in Slot 1 to convoy
  SendToConvoy:
  #incbin "ASM/sendToConvoyASMC.dmp"

  //Chapter names as text
  #include "fe8_chnames.event"

  //PC and Generic Music Hack (writes to e80000/e90000)
  // #include "PC_and_Generic_Music_FE8.event"

  //Force enemies to rescue
  ALIGN 4
  RescueASMC:
  #incbin "RescueEvent.dmp"
  #define Rescue(frontx,fronty,backx,backy) "SVAL 0x1 (fronty*0x10000 + frontx); SVAL 0x2 (backy*0x10000 + backx); ASMC RescueASMC|1"

  //Spawn new traps
  ALIGN 4
  LoadTrapsASMC:
  #define AddTraps(pointer) "SVAL 1 pointer|0x8000000; ASMC LoadTrapsASMC|1"
  #incbin "ASM/NewTrapInitializer.dmp"

  //Change Sick Status to Freeze
  #include "Freeze.event"

  //Freeze All ASMC
  ALIGN 4
  FreezeAllASMC:
  #incbin "ASM/freezeall.dmp"

  // Ch 11/13 ASMC-able function
  #include "writeDummyUnit.event"

  // Chapter 27 ASMC-able functions
  ALIGN 4
  gChapter27FogLevel:
    WORD Ch27FogLevel

  #include "CCBlitzChapter27Asmcs.lyn.event"

  // Sabin memes
  #include "IncorrectBlitzInput/IncorrectBlitzInput.event"
  
  ALIGN 4
  //We are installing new descriptions/icons.
  #define __USE_ICON_MACROS__
  //But do not inline the table (we have a .csv for that)
  //#define __INLINE_SKILL_ICON_TABLE__
  #include "Skill System/Master Skill Installer.event"

  ALIGN 4
  #include "FE8-Battle Stats with Anims Off/FE8-Battle Stats Master EA File.event"

  ALIGN 4
  #include "MSG/InstallCore.event"
  #include "MSG/InstallHelpers.event"

  ALIGN 4
  #include "StatGetters/_InstallStatGetters.event"

  ALIGN 4
  #include "IconRework/IconRework.event"   // Allows using standard Icon routines to draw skill icons
  // #include "PopupRework/PopupRework.event" // Allows to expand on vanilla popups by adding components

  ALIGN 4

  Win_Usability:
  #incbin "winbuttonusability.dmp"

  Offscreen_Levelup:
  #incbin "autolevel.dmp"
  ALIGN 4

  Win_Effect:
  #incbin "winbutton.dmp"
  POIN Offscreen_Levelup

  // DismountMount hack
  ALIGN 4
  DismountRoutine:
  #incbin "DismountMount Code/Dismount Routine.dmp"
  POIN ClassTable
  POIN MountedClassTable

  DismountUsability:
  #incbin "DismountMount Code/Dismount Usability Routine.dmp"
  POIN MountedClassTable

  MountRoutine:
  #incbin "DismountMount Code/Mount Routine.dmp"
  POIN ClassTable
  POIN MountedClassTable

  MountUsability:
  #incbin "DismountMount Code/Mount Usability Routine.dmp"
  POIN MountedClassTable


  //Repoint Unit Menu
  PUSH
    ORG $59D1F8
    POIN UnitMenuTable
    ORG $59D21C
    POIN MainMenuTable
  POP

  ALIGN 4         //Insert new commands where you want them to appear in the menu
  UnitMenuTable:
  //Use the macro MenuCommand(name,description,colour,usability,effect)
  //Color options: NormalText, GrayText, BlueText, OrangeText, GreenText (flashes), BlackText
  //MenuCommand(DualAtkTxtID,DualAtkDescId,0,DualAtkCheck,DualAtkSelected)

  PUSH
    ORG $59d1f2   //Make the unit menu wider (to fit longer words)
    BYTE 0x9
    ORG $1d4fa
    BYTE 01 //left x coord
    ORG $1d4fc
    BYTE $14 //right x coord
  POP

  UM_Seize
  MenuCommand(UMText_DV, UMText_DVDesc, GreenText, VeinUsability, VeinEffect)
  // UM_Attack
  MenuCommand(0x67b, 0x6c0, NormalText, $249ac, AttackEffect, $22c31, $22c99) //to clear flags
  // UM_Attack_B
  MenuCommand(0x67b, 0x6c0, NormalText, $24a28, AttackEffect, $22c31, $22c99)
  //Lunge
  MenuCommand(UM_Lunge, UM_LungeDesc, NormalText, LungeUsability, LungeEffect, $22c31, $22c99)
  //mercy
  MenuCommand(UM_Mercy, UM_MercyDesc, NormalText, MercyUsability, MercyEffect, $22c31, $22c99)
  //gamble
  MenuCommand(UM_Gamble, UM_GambleDesc, NormalText, GambleUsability, GambleEffect, $22c31, $22c99)
  UM_Staff
  UM_Ride
  UM_Exit
  UM_Play
  UM_Dance
  UM_Steal
  UM_Summon
  UM_Summon_DK
  UM_Pick

  //Rally
  MenuCommand(UM_Rally, UM_RallyDesc, NormalText, RallyUsability, RallyEffect)

  // UM_Talk
  MenuCommand(0x680, 0x6c9, GreenText, 0x23c81, 0x23cc5)
  // UM_Support
  MenuCommand(0x681, 0x6ca, GreenText, 0x23d15, 0x23d65)
  UM_Visit
  UM_Chest
  UM_Door
  UM_Armory
  UM_Vendor
  UM_Secret
  UM_Arena

  // Shove & cie
  MenuCommand(UM_Shove,      UM_ShoveDesc,      NormalText, prShoveCommand_Usability,      prShoveCommand_Effect)
  MenuCommand(UM_Smite,      UM_SmiteDesc,      NormalText, prSmiteCommand_Usability,      prSmiteCommand_Effect)
  MenuCommand(UM_Pivot,      UM_PivotDesc,      NormalText, prPivotCommand_Usability,      prPivotCommand_Effect)
  MenuCommand(UM_Reposition, UM_RepositionDesc, NormalText, prRepositionCommand_Usability, prRepositionCommand_Effect)
  MenuCommand(UM_Swap,       UM_SwapDesc,       NormalText, prSwapCommand_Usability,       prSwapCommand_Effect)

  UM_Rescue
  UM_Give
  UM_Take
  // MenuCommand(0x689, 0x6c5, 0, 0x228a4, RescueEffect) //rescue
  // MenuCommand(UMText_Transfer,UMText_TransferDesc,GreenText,TransferUsability,TransferTarget) //transfer
  // MenuCommand(UMText_Switch,UMText_SwitchDesc,GreenText,SwitchUsability,SwitchCommand)   //switch
  UM_Drop

  MenuCommand(UMText_Transform, UMText_TransformDesc, BlueText, DismountUsability, DismountRoutine)
  MenuCommand(UMText_Revert, UMText_RevertDesc, BlueText, MountUsability, MountRoutine)

  UM_Item
  UM_Trade
  UM_Supply

  #ifdef __DEBUG__
  MenuCommand(UMText_Win, UMDesc_Win, GreenText, Win_Usability, Win_Effect)
  #endif

  UM_Wait
  UM_Separator

MainMenuTable:
  MM_Unit
  MM_EveryOtherOneTooLazy //I'm not getting away with that one am I
  MM_Suspend
  #ifdef __DEBUG__
  MenuCommand(UM_Debug, 0, GreenText, 0x4F449, DebugEffect)
  #endif
  MM_End
  MM_Separator

  #ifdef __DEBUG__
  #include "ASM\Debug.event"
  #endif
