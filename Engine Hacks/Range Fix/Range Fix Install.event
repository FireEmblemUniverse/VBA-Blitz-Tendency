PUSH
    #define Usability_Table 0x288B0
    #define Item_Table ItemTable

    //Shouldn't have to touch these
    #define New_Use(item) "ORG Usability_Table+4*(item-0x4B); POIN 0x28A8C"
    #define New_Target(offset) "ORG offset; POIN Target_Routine_For_Non_Unlock|1"
    #define LL_Entry(staff, pointer) "WORD staff; POIN pointer"

    //###### USABILITY TABLE ######
    //Repoint staffs (except Unlock/Torch) to go to the same place, in this case, the heal routine
    New_Use(Physic)
    New_Use(Fortify)
    New_Use(Restore)
    New_Use(Silence)
    New_Use(Sleep)
    New_Use(Berserk)
    New_Use(Warp)
    New_Use(Rescue)
    New_Use(Hammerne)
    New_Use(Barrier)

    //Update Torch pointer
    ORG Usability_Table+4*(TorchStaff-0x4B)
    POIN Torch_Fix

    //Update the pointer at the heal routine to take us to the right place
    ORG $28A98
    POIN Usability_Routine_For_Non_Unlock|1

    //Update the pointer at the unlock routine to take us to the right place
    ORG $28B48
    POIN Usability_Routine_For_Unlock|1

    //####### TARGET TABLE #######
    //Can't do the same thing here that we did with the usability table because they don't all branch to the same place
    New_Target($28F98) 	//Heal/Mend/Recover
    New_Target($28FA8)	//Physic
    New_Target($28FC8)	//Restore
    New_Target($28FD0)	//Silence
    New_Target($28FD8)	//Sleep
    New_Target($28FE8)	//Berserk
    New_Target($28FB8)	//Rescue

    //For the special snowflakes
    ORG $28FFC //Unlock
    POIN Target_Routine_For_Unlock|1
    ORG $29C36 //Barrier
    BL(Non_Unlock_Jump)
    ORG $299BA //Hammerne
    BL(Non_Unlock_Jump)
    ORG $2987E //Warp
    BL(Non_Unlock_Jump)
    ORG $2F178 //UBER-SPECIAL-SNOWFLAKE Fortify
    BL(Fortify_Jump)

    //####### HIGHLIGHTED SQUARES #######

    //Fix my ballista issues the lazy way (instead of not passing in bool via r12, just make range function not use r12)
    ORG $1AAC6
    SHORT 0xB082
    ORG $1AB12
    SHORT 0x9001
    ORG $1AB16
    SHORT 0x9901
    ORG $1AB56
    SHORT 0x9201
    ORG $1AB6E
    SHORT 0x9A01
    ORG $1ABA6
    SHORT 0xB002

    ORG $16CC0 //Shows the correct range numbers when displaying an item's R-menu
    #incbin "R Button Range Display.dmp"
    POIN Item_Table

    ORG $1CC0A //When first selecting a unit, for weapons
    BL(All_Weapons_All_Squares)

    ORG $22C7C //After moving to a specific square, for weapons
    gotoHackWithR3(All_Weapons_One_Square)

    ORG $22DB0 //When selecting target (technically it's one weapon, but uses the same functions, so yay)
    gotoHackWithR3(All_Weapons_One_Square)

    ORG $34554 //Dunno when this is called, or even why it exists, but I'm putting it here just in case.
    SHORT 0x4B01
    BL(0xD18CC)
    SHORT 0xE01A
    POIN Unknown_Function|1

    ORG $1B9AE //Gets called a bunch of times; mag/2 weapons don't work here, so I need a fix
    SHORT 0x46C0
    gotoHackWithR3(Weapon_Attack)
    SHORT 0x46C0

    ORG $1CBFA //When first selecting a unit, for staffs
    BL(All_Staffs_All_Squares)

    ORG $23B40 //After moving to a specific square, for staffs
    SHORT 0x480F 0x6800 0x2100 //ldr r0,RangeMap; ldr r0,[0]; mov r1,0
    BL(0x197E4)
    SHORT 0x480C 0x6800 0x2401 0x4264 0x1C21 //ldr r0,AttackMap; ldr r0,[r0]; mov r4,1; neg r4,r4; mov r1,r4
    BL(0x197E4)
    SHORT 0x6828 0x1C21 //ldr r0,[r5]; mov r1,r4
    gotoHackWithR3(All_Staffs_One_Square)
    SHORT 0x46C0 //nop

    ORG $23C1A //When selecting target (staffs)
    SHORT 0x343C 0x2000 0x5620 //add r4,3C; mov r0,0; ldsb r0,[r4,r0]
    BL(0x1E748)
    SHORT 0x480E 0x6800 0x2101 0x4249 //ldr r0,AttackMap; ldr r0,[r0]; mov r1,1; neg r1,r1
    BL(0x197E4)
    SHORT 0x480C 0x6800 0x2100 //ldr r0,RangeMap; ldr r0,[r0]; mov r1,0
    BL(0x197E4)
    SHORT 0x6828 0x2100 0x5661
    gotoHackWithR3(All_Staffs_One_Square)
    SHORT 0x46C0 //nop

    /*ORG $16BA6 //when selecting a target
    SHORT 0x46C0 0x46C0 //skips a check that ensures min<max, which doesn't play nice with mag/2 NOTE: Originally bl'd to by the routine below, but shouldn't be necessary now?*/

    ORG $2A8C2 //determines whether you can actually attack the target
    SHORT 0x1C2A //mov r2,r5 (r5 has battle struct, but that should be fine)
    BL(Can_Attack_Target)

POP

    //************** CAN BE WRITTEN TO WHEREVER *********************

    ALIGN 4
    All_Weapons_One_Square:
    #incbin "All Weapons One Square.dmp"
    POIN Return_Range_Bitfield|1
    POIN Write_Range|1

    ALIGN 4
    All_Staffs_One_Square:
    #incbin "All Staffs One Square.dmp"
    POIN Return_Range_Bitfield|1
    POIN Write_Range|1

    ALIGN 4
    All_Moveable_Squares:
    #incbin "All Moveable Squares.dmp"
    POIN Return_Range_Bitfield|1
    POIN Write_Range|1

    ALIGN 4
    Return_Range_Bitfield:
    #incbin "Return Range Bitfield.dmp"
    POIN Get_Item_Range|1

    ALIGN 4
    Get_Item_Range:
    #incbin "Get Item Range.dmp"
    POIN Item_Table

    ALIGN 4
    Write_Range:
    #incbin "Write Range.dmp"

    ALIGN 4
    Unknown_Function:
    #incbin "Unknown Function.dmp"
    POIN Return_Range_Bitfield|1
    POIN Write_Range|1

    ALIGN 4
    Weapon_Attack:
    #incbin "Weapon Attack.dmp"

    ALIGN 4
    //####### RANGE WRITING STUFF ######
    Usability_Routine_For_Non_Unlock: //push r14; mov r1,r5; bl somewhere; pop r0; bx r0 (r5 has item id/uses halfword)
    SHORT 0xB500 0x1C29
    BL(Non_Unlock_Range)
    SHORT 0xBC01 0x4700

    Usability_Routine_For_Unlock:
    SHORT 0xB500 0x1C29
    BL(Unlock_Range)
    SHORT 0xBC01 0x4700

    Target_Routine_For_Non_Unlock: //push r14; mov r1,r4; bl somewhere; pop r0; bx r0 (need a new function because of compiler shenanigans)
    SHORT 0xB500 0x1C21
    BL(Non_Unlock_Range)
    SHORT 0xBC01 0x4700

    Target_Routine_For_Unlock:
    SHORT 0xB500 0x1C21
    BL(Unlock_Range)
    SHORT 0xBC01 0x4700

    Target_Routine_For_Fortify: //push r14; ldrb r1,[r4,#0x12]; lsl r1,r1,#0x1; add r1,#0x1E; add r1,r1,r0; ldrh r1,[r1]; bl somewhere; pop r0; bx r0 (r4+0x12 has inventory slot, r0 has char data)
    SHORT 0xB500 0x7CA1 0x0049 0x311E 0x1809 0x8809
    BL(Non_Unlock_Range)
    SHORT 0xBC01 0x4700

    ALIGN 4
    Non_Unlock_Range:
    SHORT 0xB500
    BL(Range_Write)
    #incbin "Non Unlock Range.dmp"
    POIN Function_List

    ALIGN 4
    Unlock_Range:
    SHORT 0xB500
    BL(Range_Write)
    #incbin "Unlock Range.dmp"

    ALIGN 4
    Torch_Fix:
    #incbin "Torch Fix.dmp"
    POIN Range_Write|1

    ALIGN 4
    Range_Write:
    #incbin "Range Write.dmp"
    POIN Item_Table

    ALIGN 4
    Function_List: //These functions do extra checks (check if person in range has less than max hp, has a non-zero status byte, etc), along with some other stuff
    LL_Entry(Heal, 0x25E29)
    LL_Entry(Mend, 0x25E29)
    LL_Entry(Recover, 0x25E29)
    LL_Entry(Physic, 0x25E29)
    LL_Entry(Fortify, 0x25E29)
    LL_Entry(Restore, 0x25F99)
    LL_Entry(Silence, 0x26101)
    LL_Entry(Sleep, 0x2614D)
    LL_Entry(Berserk, 0x26199)
    LL_Entry(Warp, 0x2625D)
    LL_Entry(Rescue, 0x260A1)
    LL_Entry(Torch, 0x25E29) //shouldn't ever be go here, but just in case...
    LL_Entry(Hammerne, 0x262FD)
    LL_Entry(Unlock, 0x25795) //shouldn't go here either, since it's a special snowflake
    LL_Entry(Barrier, 0x2601D)
    LL_Entry(0, 0x25E29) //The catch-all, in case you add a custom staff and forget to update this table
